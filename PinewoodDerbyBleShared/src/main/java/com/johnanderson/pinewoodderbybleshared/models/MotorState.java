// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: MotorState.proto at 7:1
package com.johnanderson.pinewoodderbybleshared.models;

import android.os.Parcelable;
import com.squareup.wire.AndroidMessage;
import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class MotorState extends AndroidMessage<MotorState, MotorState.Builder> {
  public static final ProtoAdapter<MotorState> ADAPTER = new ProtoAdapter_MotorState();

  public static final Parcelable.Creator<MotorState> CREATOR = AndroidMessage.newCreator(ADAPTER);

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_SPEED = 0;

  public static final Direction DEFAULT_DIRECTION = Direction.FORWARD;

  public static final Boolean DEFAULT_TEST = false;

  /**
   * Speed of the motor (0-255)
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer speed;

  /**
   * Direction of the motor
   */
  @WireField(
      tag = 2,
      adapter = "com.johnanderson.pinewoodderbybleshared.models.MotorState$Direction#ADAPTER",
      label = WireField.Label.REQUIRED
  )
  public final Direction direction;

  /**
   * just a test boolean to play with
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL",
      label = WireField.Label.REQUIRED
  )
  public final Boolean test;

  public MotorState(Integer speed, Direction direction, Boolean test) {
    this(speed, direction, test, ByteString.EMPTY);
  }

  public MotorState(Integer speed, Direction direction, Boolean test, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.speed = speed;
    this.direction = direction;
    this.test = test;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.speed = speed;
    builder.direction = direction;
    builder.test = test;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MotorState)) return false;
    MotorState o = (MotorState) other;
    return unknownFields().equals(o.unknownFields())
        && speed.equals(o.speed)
        && direction.equals(o.direction)
        && test.equals(o.test);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + speed.hashCode();
      result = result * 37 + direction.hashCode();
      result = result * 37 + test.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(", speed=").append(speed);
    builder.append(", direction=").append(direction);
    builder.append(", test=").append(test);
    return builder.replace(0, 2, "MotorState{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<MotorState, Builder> {
    public Integer speed;

    public Direction direction;

    public Boolean test;

    public Builder() {
    }

    /**
     * Speed of the motor (0-255)
     */
    public Builder speed(Integer speed) {
      this.speed = speed;
      return this;
    }

    /**
     * Direction of the motor
     */
    public Builder direction(Direction direction) {
      this.direction = direction;
      return this;
    }

    /**
     * just a test boolean to play with
     */
    public Builder test(Boolean test) {
      this.test = test;
      return this;
    }

    @Override
    public MotorState build() {
      if (speed == null
          || direction == null
          || test == null) {
        throw Internal.missingRequiredFields(speed, "speed",
            direction, "direction",
            test, "test");
      }
      return new MotorState(speed, direction, test, super.buildUnknownFields());
    }
  }

  public enum Direction implements WireEnum {
    FORWARD(0),

    BACKWARD(1);

    public static final ProtoAdapter<Direction> ADAPTER = ProtoAdapter.newEnumAdapter(Direction.class);

    private final int value;

    Direction(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Direction fromValue(int value) {
      switch (value) {
        case 0: return FORWARD;
        case 1: return BACKWARD;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_MotorState extends ProtoAdapter<MotorState> {
    ProtoAdapter_MotorState() {
      super(FieldEncoding.LENGTH_DELIMITED, MotorState.class);
    }

    @Override
    public int encodedSize(MotorState value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.speed)
          + Direction.ADAPTER.encodedSizeWithTag(2, value.direction)
          + ProtoAdapter.BOOL.encodedSizeWithTag(3, value.test)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MotorState value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.speed);
      Direction.ADAPTER.encodeWithTag(writer, 2, value.direction);
      ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.test);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MotorState decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.speed(ProtoAdapter.INT32.decode(reader)); break;
          case 2: {
            try {
              builder.direction(Direction.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.test(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MotorState redact(MotorState value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
